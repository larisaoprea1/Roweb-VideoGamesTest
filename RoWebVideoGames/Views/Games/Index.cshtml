@using RoWebVideoGames.Data

@model PaginatedList<RoWebVideoGames.Models.Games>

@{
    ViewData["Title"] = "Game List";
}

<h1>VideoGames List</h1>

<p>
    <a asp-action="Create">Add a new game</a>
</p>
<table class="table">
    
    <thead>
        <tr>
            <th>
                Title
            </th>
            <th>
                ReleaseDate
            </th>
            <th>
                Genre
            </th>
            <th>
                Price
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Title)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ReleaseDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Genre)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Price)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>
@*@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

<a asp-action="Index"
   asp-route-pageNumber="@(Model.PageIndex - 1)"
   class="btn btn-default @prevDisabled">
    Previous
</a>
<a asp-action="Index"
   asp-route-pageNumber="@(Model.PageIndex + 1)"
   class="btn btn-default @nextDisabled">
    Next
</a>*@
@for(int page=1; page <= Model.TotalPages; page++)
{
   <a asp-action="Index"
   asp-route-pageNumber="@(page)"
   class="btn btn-default">
   @(page)
   </a>
}